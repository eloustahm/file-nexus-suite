
import { useState } from 'react';
import { DocumentTemplate, TemplateField } from '../types/generatorTypes';
import { Agent } from '../types/chatTypes';

export const useDocumentGeneration = () => {
  const [selectedTemplate, setSelectedTemplate] = useState<DocumentTemplate | null>(null);
  const [selectedAgent, setSelectedAgent] = useState<Agent | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState("");
  const [isEditing, setIsEditing] = useState(false);
  const [editedContent, setEditedContent] = useState("");

  const updateFieldValue = (fieldId: string, value: string) => {
    if (!selectedTemplate) return;
    
    const updatedTemplate = {
      ...selectedTemplate,
      fields: selectedTemplate.fields.map(field => 
        field.id === fieldId ? { ...field, value } : field
      )
    };
    setSelectedTemplate(updatedTemplate);
  };

  const addCustomField = (field: TemplateField) => {
    if (!selectedTemplate) return;
    
    setSelectedTemplate({
      ...selectedTemplate,
      fields: [...selectedTemplate.fields, field]
    });
  };

  const removeField = (fieldId: string) => {
    if (!selectedTemplate) return;
    
    setSelectedTemplate({
      ...selectedTemplate,
      fields: selectedTemplate.fields.filter(field => field.id !== fieldId)
    });
  };

  const getAgentGeneratedContent = (template: DocumentTemplate, agent: Agent) => {
    let content = '';
    
    switch (agent.personality) {
      case 'formal':
        content = `# ${template.name}\n\n## Executive Summary\n\nThis document serves as a comprehensive ${template.name.toLowerCase()} prepared in accordance with professional standards and industry best practices.\n\n`;
        break;
      case 'creative':
        content = `# ðŸŒŸ ${template.name}\n\n*Crafted with precision and care*\n\nWelcome to this thoughtfully designed ${template.name.toLowerCase()}, where every detail has been carefully considered to meet your unique needs.\n\n`;
        break;
      case 'technical':
        content = `# ${template.name}\n## Document Specification v1.0\n\n### Technical Overview\nThis ${template.name.toLowerCase()} has been systematically structured to provide comprehensive documentation with detailed specifications.\n\n`;
        break;
      case 'persuasive':
        content = `# ${template.name} ðŸ“ˆ\n\n## Unlock Your Success\n\nThis powerful ${template.name.toLowerCase()} is designed to drive results and create maximum impact for your business objectives.\n\n`;
        break;
      default:
        content = `# ${template.name}\n\n`;
    }
    
    // Add field content
    template.fields.forEach(field => {
      if (field.value) {
        content += `**${field.label}:** ${field.value}\n\n`;
      }
    });
    
    // Add agent-specific footer
    content += `\n---\n\n`;
    content += `*Generated on: ${new Date().toLocaleDateString()}*\n`;
    content += `*Template: ${template.name}*\n`;
    content += `*Generated by: ${agent.name}*\n`;
    
    return content;
  };

  const generateDocument = () => {
    if (!selectedTemplate || !selectedAgent) return;
    
    setIsGenerating(true);
    
    setTimeout(() => {
      let content = getAgentGeneratedContent(selectedTemplate, selectedAgent);
      
      setGeneratedContent(content);
      setEditedContent(content);
      setIsGenerating(false);
    }, 2500);
  };

  const handleEditToggle = () => {
    if (isEditing) {
      setGeneratedContent(editedContent);
    }
    setIsEditing(!isEditing);
  };

  const handleCopyContent = () => {
    navigator.clipboard.writeText(generatedContent);
  };

  const handleRefreshContent = () => {
    if (selectedTemplate && selectedAgent) {
      generateDocument();
    }
  };

  return {
    selectedTemplate,
    setSelectedTemplate,
    selectedAgent,
    setSelectedAgent,
    isGenerating,
    generatedContent,
    isEditing,
    editedContent,
    setEditedContent,
    updateFieldValue,
    addCustomField,
    removeField,
    generateDocument,
    handleEditToggle,
    handleCopyContent,
    handleRefreshContent
  };
};
